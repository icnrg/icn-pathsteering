diff --git a/src/draft-oran-icnrg-pathsteering.xml b/src/draft-oran-icnrg-pathsteering.xml
index 5b3fe8e..25d1631 100644
--- a/src/draft-oran-icnrg-pathsteering.xml
+++ b/src/draft-oran-icnrg-pathsteering.xml
@@ -3,7 +3,7 @@
      which is available here: http://xml.resource.org. -->
 <!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
 <!-- One method to get references from the online citation libraries.
-     There has to be one entity for each item to be referenced. 
+     There has to be one entity for each item to be referenced.
      An alternate method (rfc include) is described in the references. -->
 
 <!ENTITY RFC0793 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.0793.xml">
@@ -25,7 +25,7 @@
 ]>
 <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>
 <!-- used by XSLT processors -->
-<!-- For a complete list and description of processing instructions (PIs), 
+<!-- For a complete list and description of processing instructions (PIs),
      please see http://xml.resource.org/authoring/README.html. -->
 <!-- Below are generally applicable Processing Instructions (PIs) that most I-Ds might want to use.
      (Here they are set differently than their defaults in xml2rfc v1.32) -->
@@ -41,7 +41,7 @@
 <!-- use symbolic references tags, i.e, [RFC2119] instead of [1] -->
 <?rfc sortrefs="yes" ?>
 <!-- sort the reference entries alphabetically -->
-<!-- control vertical white space 
+<!-- control vertical white space
      (using these PIs as follows is recommended by the RFC Editor) -->
 <?rfc compact="yes" ?>
 <!-- do not start each main section on a new page -->
@@ -52,12 +52,12 @@
 <rfc category="exp" docName="draft-oran-icnrg-pathsteering-latest" ipr="trust200902">
   <!-- category values: std, bcp, info, exp, and historic
      ipr values: full3667, noModification3667, noDerivatives3667
-     you can add the attributes updates="NNNN" and obsoletes="NNNN" 
+     you can add the attributes updates="NNNN" and obsoletes="NNNN"
      they will automatically be output with "(if approved)" -->
 
   <!-- ***** FRONT MATTER ***** -->
 <front>
-    <!-- The abbreviated title is used in the page header - it is only necessary if the 
+    <!-- The abbreviated title is used in the page header - it is only necessary if the
          full title is longer than 39 characters -->
     <title abbrev="ICN Path Steering">
     Path Steering in CCNx and NDN
@@ -65,17 +65,17 @@
 
     <!-- add 'role="editor"' below for the editors if appropriate -->
     <author fullname="Ilya Moiseenko" surname="I. Moiseenko">
-      <organization>Apple Computer</organization>
+      <organization>University of California, Los Angeles</organization>
       <address>
         <postal>
           <street></street>
-          <city>Cupertino</city>
-          <region>CA</region>
+          <city></city>
+          <region></region>
           <code></code>
-          <country>USA</country>
+          <country></country>
         </postal>
         <phone></phone>
-        <email>imoiseenko@apple.com</email>
+        <email>iliamo@ucla.edu</email>
         <!-- uri and facsimile elements may also be added -->
       </address>
     </author>
@@ -101,11 +101,11 @@
 
     <date month="September" year="2019" />
 
-    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill 
-         in the current day for you. If only the current year is specified, xml2rfc will fill 
-	 in the current day and month for you. If the year is not the current one, it is 
-	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the 
-	 purpose of calculating the expiry date).  With drafts it is normally sufficient to 
+    <!-- If the month and year are both specified and are the current ones, xml2rfc will fill
+         in the current day for you. If only the current year is specified, xml2rfc will fill
+	 in the current day and month for you. If the year is not the current one, it is
+	 necessary to specify at least a month (xml2rfc assumes day="1" if not specified for the
+	 purpose of calculating the expiry date).  With drafts it is normally sufficient to
 	 specify just the year. -->
 
     <!-- Meta-data Declarations -->
@@ -114,7 +114,7 @@
     <workgroup>ICNRG</workgroup>
 
     <!-- WG name at the upperleft corner of the doc,
-         IETF is fine for individual submissions.  
+         IETF is fine for individual submissions.
 	 If this element is not present, the default is "Network Working Group",
          which is used by the RFC Editor as a nod to the history of the IETF. -->
 
@@ -136,15 +136,15 @@
 <section anchor="intro" title="Introduction">
 	<t>Path Steering is a mechanism to discover paths to the producers of ICN content objects and steer subsequent Interest messages along a previously discovered path. It has various uses, including the operation of state-of-the-art multipath congestion control algorithms and for network measurement and management. This specification derives directly from the design published in <xref target="Moiseenko2017"/> and therefore does not recapitulate the design motivations, implementation details, or evaluation of the scheme. That publication should be considered a normative reference as it is not likely a reader will be able to understand all elements of this design without first having read the reference. Some technical details are different however, and where there are differences, the design documented here is to be considered definitive.
 	</t>
-	
+
 	<t>There are a number of important use cases to justify extending ICN architectures such as <xref target="RFC8569">CCNx</xref> or <xref target="NDN">NDN</xref> to provide these capabilities. These are summarized as follows:
 	<list style="symbols">
 		<t>Support the discovery, monitoring and troubleshooting of multi-path network connectivity based on names and name prefixes. Analogous functions have been shown to be a crucial operational capability in multicast and multi-path topologies for IP. The canonical tools are the well-known <spanx>traceroute</spanx> and <spanx>ping</spanx>. For point-to-multipoint MPLS the more recent <xref target="RFC8029">tree trace</xref> protocol is used. Equivalent diagnostic functions have been defined for CCNx through the <xref target="I-D.mastorakis-icnrg-icnping">ICN Ping</xref> and <xref target="I-D.mastorakis-icnrg-icntraceroute">ICN Traceroute</xref> specifications, both of which are capable of exploiting path steering if available.</t>
-		
+
 		<t>Perform accurate online measurement of network performance, which generally requires multiple consecutive packets follow the same path under control of an application.</t>
-		
+
 		<t>Improve the performance and flexibility of multi-path congestion control algorithms. Congestion control schemes such as <xref target="Mahdian2016"/> and <xref target="Song2018"/> depend on the ability of a consumer to explicitly steer packets onto individual paths in a multi-path and/or multi-destination topology.</t>
-		
+
 		<t>A consumer endpoint can mitigate content poisoning attacks by directing its Interests onto the network paths that bypass poisoned caches.</t>
 	</list>
 	Path discovery and subsequent path steering in ICN networks is facilitated by the symmetry of forward and reverse paths in the CCNx and NDN architectures. Path discovery is achieved by a consumer endpoint transmitting an ordinary Interest message and receiving a Content (Data) message containing an end-to-end path label constructed on the reverse path by the forwarding plane. Path steering is achieved by a consumer endpoint including a path label in the Interest message, which is forwarded to each nexthop through the corresponding egress interfaces in conjunction with longest name prefix match (LNPM) FIB lookup.</t>
@@ -163,11 +163,12 @@
 
 	<section anchor="discovery" title="Path Discovery">
 		<t><spanx>End-to-end Path Discovery</spanx> for CCNx is achieved by creating a <spanx>path label</spanx> and placing it as a hop-by-hop TLV in a CCNx Content (Data) message. The path label is constructed hop-by-hop as the message traverses the reverse path of transit CCNx forwarders (Figure TBD). The path label is updated by adding to the existing path label the nexthop label of the interface at which the Content (Data) message has arrived. Eventually, when the Content(Data) message arrives at the consumer, the path label identifies the complete path the Content (Data) message took to reach the consumer.</t>
-		
+
 		<t><spanx style="strong">Issue:</spanx> <spanx>how to indicate in an Interest message that the consumer wants to do path discovery? Flag in the fixed header? Empty Path Steering TLV (with index set to zero?). If we do the former, would need some way to indicate how big the producer should make it since it doesn't know how many hops there are on the reverse path. That's not a problem if we do the latter, but that makes the Interest message bigger even though it doesn't have a path yet. Making the path steering TLV the maximum size (i.e. based on what hop limit is set to) wastes a lot of space since most paths are likely to be way shorter than what the hop limit is set to by the consumer. Doing so does make transforming the Interest message into a Content Object message a bit easier though, since the hop-by-hop headers are likely already sized right. Another option is to define a new TLV to carry the unmodified hop limit by the consumer. Then the producer then just does a subtraction to get the traversed path length.</spanx></t>
-		
-	
-		
+
+    <t><spanx style="strong">Ilya:</spanx>I added some flags TLV, so it is possible to have a separate "Discovery mode" flag, that would tell forwarders to increment hop label index (instead of decrementing and reading the path label)</t>
+    <t><spanx style="strong">Ilya:</spanx>Is 64 bytes really much these days? I don't quite like the idea of telling the producer how far away i am. I think it will be a privacy concern for some people.</t>
+    <t><spanx style="strong">Ilya:</spanx>Can it be solved from prefix registration side? Producer gets label size supported by the network from its ISP? Idk what about intermediate caches. </t>
 
 <!-- >\begin{figure}[hbtp]
   \centering
@@ -178,51 +179,46 @@
 \end{figure}
 -->
 	</section>
-	
+
 	<section anchor="steering" title="Path Steering">
 		<t>Due to the symmetry of forward and reverse paths in CCNx, a consumer application can reuse a discovered path label to fetch the same or similar (e.g. next chunk, or next Application Data Unit, or next pointer in a <xref target="I-D.icnrg-flic">Manifest</xref>) Content (Data) message over the discovered network path. This <spanx>Path Steering</spanx> is achieved by processing the Interest message's path label at each transit ICN forwarder and forwarding the Interest through the specified nexthop among those identified as feasible by LNPM FIB lookup (Figure TBD).</t>
 	</section>
 
 	<section anchor="error-processing" title="Handling Path Steering errors">
-		<t>Over time, the state of interfaces and the FIB on forwarders may change such that, at any particular forwarder, a given nexthop is no longer valid for a given prefix. In this case, the path label will point to a now-invalid nexthop. This is detected by failure to find a match between the decoded nexthop ID and the nexthops of the FIB entry after LNPM FIB lookup.</t> 
+		<t>Over time, the state of interfaces and the FIB on forwarders may change such that, at any particular forwarder, a given nexthop is no longer valid for a given prefix. In this case, the path label will point to a now-invalid nexthop. This is detected by failure to find a match between the decoded nexthop ID and the nexthops of the FIB entry after LNPM FIB lookup.</t>
 
 		<t>On detecting an invalid path label, the forwarder SHOULD respond to the Interest with an Interest-Return. We therefor define a new <spanx>Invalid path label</spanx> response code for the Interest Return message and include the current path label as a hop-by-hop header. Each transit forwarder processing the Interest-Return message updates the path label in the same manner as Content (Data) messages, so that the consumer receiving the Interest-Return (NACK) can easily identify which path label is no longer valid.</t>
-		
+
 		<t><spanx style="strong">Issue:</spanx> <spanx>should we provide an option to the consumer to forward the interest rather than returning the error? This is briefly discussed in the paper, but specific machinery isn't suggested. I think this would potentially be useful for diagnosis. If so, we need to re-jigger the description a bit and include the following paragraph</spanx></t>
 
 		<t>A consumer may alternatively request that a forwarder detecting the inconsistency forward the Interest by means of normal LNPM FIB lookup rather than returning an error. The consumer endpoint, if it cares, can keep enough information about outstanding Interests to determine if the path label sent with the Interest fails to match the path label in the corresponding returned Content (Data), and use that information to replace stale path labels. It does so by setting the (TBD mechanism) in its Interest message.</t>
 	</section>
-	
+
 	<section anchor="label-encoding" title="How to represent the Path Label">
 		<t><xref target="Moiseenko2017"/> presents various options for how to represent a path label, with different tradeoffs in flexibility, performance and space efficiency. For this specification, we choose the <spanx>Polynomial encoding</spanx> which achieves reasonable space efficiency at the cost of establishing a hard limit on the length of paths that can be represented.</t>
-	
-		<t>The polynomial encoding utilizes a fixed-size bit array. Each transit ICN forwarder is allocated a fixed sized portion of the bit array. This design allocates 12 bits (i.e. 4095 as a <spanx>generator polynomial</spanx>) to each intermediate ICN forwarder. This should match the scalability of today's commercial routers that support up to 4096 physical and logical interfaces and usually do not have more than a few hundred active ones.</t>  
-	
-		<t>A forwarder that receives a Content (Data) message encodes the nexthop label in the next available slot and increments label (Figure fig:poly). Conversely, a forwarder that receives an Interest message reads the current nexthop label and decrements label index. Therefore, the extra computation required at each hop to forward either an interest or Content Object message with a path label is minimized and constitutes a fairly trivial additional overhead compared to FIB lookup and other required operations.</t>
-		
+
+		<t>The polynomial encoding utilizes a fixed-size bit array. Each transit ICN forwarder is allocated a fixed sized portion of the bit array. This design allocates 12 bits (i.e. 4095 as a <spanx>generator polynomial</spanx>) to each intermediate ICN forwarder. This should match the scalability of today's commercial routers that support up to 4096 physical and logical interfaces and usually do not have more than a few hundred active ones.</t>
+
+    <figure title="Figure 1: Fixed size path label bitmap">
+      <artwork><![CDATA[
+        +----------+-----------+-----------+------------------+
+        |   index  |  nexthop  |  nexthop  |                  |
+        |          |   label   |   label   |                  |
+        +----------+-----------+-----------+------------------+
+        |<- 8bit ->|<- 12bit ->|<- 12bit ->|<---------------->|
+      ]]></artwork>
+    </figure>
+
+		<t>A forwarder that receives a Content (Data) message encodes the nexthop label in the next available slot and increments label index. Conversely, a forwarder that receives an Interest message reads the current nexthop label and decrements label index. Therefore, the extra computation required at each hop to forward either an interest or Content Object message with a path label is minimized and constitutes a fairly trivial additional overhead compared to FIB lookup and other required operations.</t>
+
 		<t>This approach results in individual path label TLV instances being of fixed pre-computed size. While this places a hard upper bound on the maximum number of network hops that can be repreented, this is not a significant a practical problem in CCNx, since the size can be pre-set during Interest message encoding based on the consumer specified value of the hop-limit. Even long paths of 24 hops will fit in a path steering TLV of 36 bytes.</t>
-	</section>
-		
-<!--
- \begin{figure}[hbtp]
-  \centering
-  \includegraphics[scale=0.7]{poly}
-  \vspace{-0.2cm}
-  \caption{512 bit path label can encode a 42-hop long path.}
-  \label{fig:poly}
-  \vspace{-0.2cm}
-\end{figure}
 
-%This encoding is a minor variation of polynomial encoding~(\ref{eq:poly}), where $x$ is a maximum 12 bit value (4095), and $a_0$ .. $a_n$ are interface labels (interface IDs).
-%\begin{equation}
-%\label{eq:poly}
-%a_0 + a_1 x + ... + a_n x^{n-1}
-%\end{equation}
--->
+
+  </section>
 </section>
 
 <section anchor="encoding" title="Mapping to CCNx and NDN packet encodings">
-	<t>TBD.Need definitions for:
+  <t>TBD.Need definitions for:
 	<list style="numbers">
 		<t>Path Steering hop-by-hop header TLV</t>
 		<t>Interest Return error code for <spanx>Invalid Path Label</spanx></t>
@@ -231,12 +227,79 @@
 	</list>
 	</t>
 
-	<section anchor="CCNx-encoding" title="Packet encoding for CCNx">
-		<t>TBD</t>
+  <section anchor="Path-label-types" title="Path label TLV">
+    <t>NDN and CCNx entities MUST support 512-bit path label bitmaps. An entity MAY support the remaining path label types. New path label types MAY be added in future to support emerging communication patterns.</t>
+    <figure title="Table 1: Path label types">
+      <artwork><![CDATA[
+                +-------------------+------------------------+
+                |      Abbrev       |    Lengths (octets)    |
+                +-------------------+------------------------+
+                | T_PATH_LABEL-128  |           16           |
+                |                   |                        |
+                | T_PATH_LABEL-256  |           32           |
+                |                   |                        |
+                | T_PATH_LABEL-512  |           64           |
+                |                   |                        |
+                | T_PATH_LABEL-1024 |           128          |
+                +-------------------+------------------------+
+                ]]>
+        </artwork>
+    </figure>
+
+    <t>NDN and CCNx forwarders MUST fallback to longest name prefix match (LNPM) FIB lookup if Interest packet carries an invalid path label and FALLBACK MODE flag is set.</t>
+    <t>CCNx forwarders MUST respond with Interest Return packet with T_RETURN_INVALID_PATH_LABEL code if Interest packet carries an invalid path label and STRICT MODE flag is set.</t>
+    <t>NDN forwarders MUST respond with Interest NACK packet with InvalidPathLabel NACK reason if Interest packet carries an invalid path label and STRICT MODE flag is set. InvalidPathLabel NACK reason SHALL be assigned 0xC8 hexademical number.</t>
+    <t>CCNx forwarders MUST respond with Interest Return packet with T_RETURN_MALFORMED_INTEREST code if Interest packet carries a path label TLV with both FALLBACK MODE and STRICT MODE set. </t>
+    <t>NDN forwarders MUST drop the Interest if the packet carries a path label TLV with both FALLBACK MODE and STRICT MODE set. </t>
+    <figure title="Table 2: Path label flags">
+      <artwork><![CDATA[
+                +-------------------+------------------------+
+                |       Flag        |      Value (hex)       |
+                +-------------------+------------------------+
+                | FALLBACK MODE     |         0x01           |
+                |                   |                        |
+                | STRICT MODE       |         0x02           |
+                +-------------------+------------------------+
+                ]]>
+        </artwork>
+    </figure>
+  </section>
+
+
+	<section anchor="CCNx-encoding" title="Path label encoding for CCNx">
+    <t> Path label is an optional Hop-by-Hop header TLV that can be present in CCNx Interest, InterestReturn and Content Object packets.</t>
+    <figure title="Figure 2: Path label Hop-by-Hop header TLV for CCNx">
+      <artwork><![CDATA[
+         0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
+        +---------------+---------------+---------------+---------------+
+        |         T_PATH_LABEL          |  Length + 1   |     Flags     |
+        +---------------+---------------+---------------+---------------+
+        /                                                               /
+        /                      Path label (Length octets)               /
+        /                                                               /
+        +---------------+---------------+---------------+---------------+
+      ]]></artwork>
+    </figure>
 	</section>
-	
-	<section anchor="NDN-encoding" title="Packet encoding for NDN">
-		<t>TBD based on <xref target="NDNTLV"/>. Suggestions from the NDN team greatly appreciated.</t>
+
+	<section anchor="NDN-encoding" title="Path label encoding for NDN">
+		<t>Path label is an optional TLV in NDN Interest and Data packets. Path Label TLV SHALL NOT take part in Interest or Data signature calculation. </t>
+    <figure title="Figure 3: Path label TLV for NDN">
+      <artwork><![CDATA[
+        PathLabel = PATH-LABEL-TYPE TLV-LENGTH
+                    PathLabelFlags
+                    PathLabelBitmap
+
+        PathLabelFlags  = PATH-LABEL-FLAGS-TYPE
+                          TLV-LENGTH ; == 1
+                          OCTET
+
+        PathLabelBitmap = PATH-LABEL-BITMAP-TYPE
+                          TLV-LENGTH ; == 64
+                          64 OCTET
+      ]]></artwork>
+      </figure>
+      <t>PATH-LABEL-TYPE SHALL be assigned 0x09 hexadecimal number, PATH-LABEL-FLAGS-TYPE SHALL be assigned 0xB hexademical number, PATH-LABEL-BITMAP-TYPE SHALL be assigned 0xD hexademical number.</t>
 	</section>
 </section>
 
@@ -246,6 +309,9 @@
 
 <section anchor="IANA" title="IANA Considerations">
 
+<t> T_PATH_LABEL SHALL use 0x0004 value in "CCNx Hop-by-Hop Types" registry. </t>
+<t> T_RETURN_INVALID_PATH_LABEL SHALL use 0xA value in "CCNx Interest Return Code Types" registry. </t>
+
 	<t>TBD. Need definitions for:
 	<list style="numbers">
 		<t>Path Steering hop-by-hop header TLV</t>
@@ -256,26 +322,26 @@
 </section>
 
 <section anchor="security" title="Security Considerations">
-	<t>A path is invalidated by renumbering nexthop label(s). A malicious consumer can attempt to mount an attack by transmitting Interests with path labels which differ only in a single now-invalid nexthop label in order to <spanx style="emph">brute force</spanx> a valid nexthop label. If such an attack succeeds, a malicious consumer would be capable of steering Interests over a network path that may not match the paths computed by the routing algorithm or learned adaptively by the forwarders.</t>  
+	<t>A path is invalidated by renumbering nexthop label(s). A malicious consumer can attempt to mount an attack by transmitting Interests with path labels which differ only in a single now-invalid nexthop label in order to <spanx style="emph">brute force</spanx> a valid nexthop label. If such an attack succeeds, a malicious consumer would be capable of steering Interests over a network path that may not match the paths computed by the routing algorithm or learned adaptively by the forwarders.</t>
 
 	<t>When a label lookup fails, by default an <spanx>Invalid path label</spanx> Interest-Return (NACK) message is returned to the consumer. This contains a path label identical to the one included in the corresponding Interest message. A malicious consumer can therefore analyze the message's Hop Count field to infer which specific nexthop label had failed and direct an attack to influence path steering at that hop. This threat can be mitigated by the following countermeasures:
-	
+
 	<list style="symbols">
 		<t>A nexthop label of larger size is harder to crack. If nexthop labels are not allocated in a predictable fashion by the routers, brute forcing a 32-bit nexthop label requires on average O(2^31) Interests. However, this specification uses nexthop labels with much less entropy (12 bits), so depending on computational hardness is not workable.</t>
-		
+
 		<t>An ICN forwarder can periodically update nexthop labels to limit the maximum lifetime of paths. It is RECOMMENDED that forwarders update path labels at least every few minutes.</t>
-		
+
 		<t>A void Hop Count field in an <spanx>Invalid path label</spanx> Interest-Return (NACK) message would not give out the information on which specific nexthop label had failed. An attacker might need to brute force all nexthop labels in all combinations. However, some useful diagnostic capability is lost by obscuring the hop count. For example the locus of routing churn is harder to pin down through analysis of path-steered pings or traceroutes. A forwarder MAY choose to invalidate the hop count in addition to changing nexthop labels periodically as above.</t>
 	</list></t>
-	
+
 	<t>ICN protocols can be susceptible to a variety of cache poisoning attacks, where a colluding consumer and producer arrange for bogus content (with either invalid or inappropriate signatures) to populate forwarder caches. These are generally confined to on-path attacks. It is also theoretically possible to launch a similar attack without a cooperating producer such that the caches of on-path routers become poisoned with the content from off-path routers (i.e. physical connectivity, but no route in a FIB for a given prefix). We estimate that without any prior knowledge of the network topology, the complexity of this type of attack is in the ballpark of Breadth-First-Search and Depth-First-Search algorithms with the additional burden of transmitting 2^31 Interests in order to crack a nexthop label on each hop.
-	 
+
 	Relatively short periodic update of nexthop labels and anti- <spanx>label scan</spanx> heuristics implemented in the ICN forwarder may successfully mitigate this type of attack.</t>
 
 	<section anchor="encryptpathlabel" title="Cryptographic protection of a path label">
 		<t>If the countermeasures listed above do not provide sufficient protection against malicious mis-steering of Interests, the path label can be made opaque to the consumer endpoint via hop-by-hop symmetric cryptography applied to the path labels (Figure TBD). This method is viable due to the symmetry of forward and reverse paths in CCNx and NDN architectures combined with ICN path steering requiring only reads/writes of the topmost nexthop label (i.e. active nexthop label) in the path label. This way a path steering capable ICN forwarder receiving a Data (Content) message encrypts the current path label with its own non-shared symmetric key prior to adding a new nexthop label to the path label. The Data (Content) message is forwarded downstream with unencrypted topmost (i.e active) nexthop label and encrypted remaining content of the path label. As a result, a consumer endpoint receives a Data (Content) message with a unique path label exposing only the topmost nexthop label as cleartext. A path steering  forwarder receiving an Interest message performs label lookup using the topmost nexthop label, decrypts the path label with its own non-shared symmetric key, and forwards the message upstream.</t>
 
-		<t>Cryptographic protection of a path label does not require any key negotiation among ICN forwarders, and is no more expensive than MACsec or IPsec. It is also quite possible that strict hop-by-hop path label encryption is not necessary and path label encryption only on the border routers of the trusted administrative or routing domains may suffice.</t> 
+		<t>Cryptographic protection of a path label does not require any key negotiation among ICN forwarders, and is no more expensive than MACsec or IPsec. It is also quite possible that strict hop-by-hop path label encryption is not necessary and path label encryption only on the border routers of the trusted administrative or routing domains may suffice.</t>
 
 		<!-- \begin{figure}[hbtp]
 		  \centering
@@ -312,7 +378,7 @@
 		&RFC2119;
 		&RFC8569;
 		&RFC8609;
-		
+
 		<reference anchor="Moiseenko2017" target="https://conferences.sigcomm.org/acm-icn/2017/proceedings/icn17-2.pdf">
 			<front>
 				<title>Path Switching in Content Centric and Named Data Networks, in 4th ACM Conference on Information-Centric Networking (ICN 2017)</title>
@@ -329,7 +395,7 @@
 		&I-D.mastorakis-icnrg-icnping;
 		&I-D.mastorakis-icnrg-icntraceroute;
 		&I-D.icnrg-flic;
-		
+
 		<reference anchor="Mahdian2016" target="http://conferences2.sigcomm.org/acm-icn/2016/proceedings/p1-mahdian.pdf">
 			<front>
 				<title>MIRCC: Multipath-aware ICN Rate-based Congestion Control, in Proceedings of the 3rd ACM Conference on Information-Centric Networking</title>
@@ -341,8 +407,8 @@
 			</front>
 			<seriesInfo name="DOI" value="10.1145/2984356.2984365"/>
 		</reference>
-		
-		
+
+
 		<reference anchor="Song2018" target="https://conferences.sigcomm.org/acm-icn/2018/proceedings/icn18-final62.pdf">
 			<front>
 				<title>SMIC: Subflow-level Multi-path Interest Control for Information Centric Networking, in 5th ACM Conference on Information-Centric Networking</title>
@@ -362,7 +428,7 @@
 				<date year="various"/>
 			</front>
 		</reference>
-	
+
 		<reference anchor="NDNTLV" target="http://named-data.net/doc/ndn-tlv/">
     		<front>
         		<title>NDN Packet Format Specification.</title>
@@ -375,7 +441,7 @@
 
     <!-- Change Log
 v00 2019-07-13  DRO Initial version
-v01 2019-08-10	DRO	Respond to comments by Naveen Nathan and Klaus Schneider 
+v01 2019-08-10	DRO	Respond to comments by Naveen Nathan and Klaus Schneider
 	-->
   </back>
 </rfc>
